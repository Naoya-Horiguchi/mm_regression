KERNEL_SRC=/src/linux-dev
. test_core/lib/common.sh
. test_core/lib/setup_mce_tools.sh
. test_core/lib/setup_hugetlb_base.sh
. test_core/lib/setup_thp_base.sh
. setup_mce_multiple_injection.sh
. setup_mce_hugetlb.sh
. setup_mce_thp.sh
. setup_mce_capability_check.sh

NR_THREAD=4
MONARCH_TIMEOUT=20000000
MULTIINJ_ITERATIONS=10

#
# buddy
#

# TEST_TITLE=multiple_injection_buddy_mce-srao
# TARGET_PAGEFLAG="buddy"
# INJECT_TYPE=mce-srao
# TEST_PREPARE=prepare_multiple_injection_race
# TEST_CLEANUP=cleanup_multiple_injection_race
# TEST_CONTROLLER=control_multiple_injection_race
# TEST_CHECKER=check_multiple_injection_race
# TEST_FLAGS=devel
# TEST_RETRYABLE=
# EXPECTED_RETURN_CODE="START EXIT"
# do_test_async

TEST_TITLE=multiple_injection_buddy_hard-offline
TARGET_PAGEFLAG="buddy"
INJECT_TYPE=hard-offline
TEST_PREPARE=prepare_multiple_injection_race
TEST_CLEANUP=cleanup_multiple_injection_race
TEST_CONTROLLER=control_multiple_injection_race
TEST_CHECKER=check_multiple_injection_race
TEST_FLAGS=
TEST_RETRYABLE=
EXPECTED_RETURN_CODE="START EXIT"
FIXEDBY_SUBJECT="mm: soft-offline: don't free target page in successful page migration|mm/memory-failure: introduce get_hwpoison_page() for consistent refcount handling|mm/memory-failure: split thp earlier in memory error handling|mm/hwpoison-inject: check PageLRU of hpage|mm/hwpoison-inject: fix refcounting in no-injection case|mm/memory-failure: call shake_page() when error hits thp tail page|mm: hugetlb: cleanup using paeg_huge_active()|mm: hugetlb: introduce page_huge_active"
FIXEDBY_PATCH_SEARCH_DATE="Apr 1 2015"
do_test_async

TEST_TITLE=multiple_injection_buddy_soft-offline
TARGET_PAGEFLAG="buddy"
INJECT_TYPE=soft-offline
TEST_PREPARE=prepare_multiple_injection_race
TEST_CLEANUP=cleanup_multiple_injection_race
TEST_CONTROLLER=control_multiple_injection_race
TEST_CHECKER=check_multiple_injection_race
TEST_FLAGS=
TEST_RETRYABLE=
EXPECTED_RETURN_CODE="START EXIT"
FIXEDBY_SUBJECT="mm: soft-offline: don't free target page in successful page migration|mm/memory-failure: introduce get_hwpoison_page() for consistent refcount handling|mm/memory-failure: split thp earlier in memory error handling|mm/hwpoison-inject: check PageLRU of hpage|mm/hwpoison-inject: fix refcounting in no-injection case|mm/memory-failure: call shake_page() when error hits thp tail page|mm: hugetlb: cleanup using paeg_huge_active()|mm: hugetlb: introduce page_huge_active"
FIXEDBY_PATCH_SEARCH_DATE="Apr 1 2015"
do_test_async

TEST_TITLE=multiple_injection_buddy_hard-soft
TARGET_PAGEFLAG="buddy"
INJECT_TYPE=hard-soft
TEST_PREPARE=prepare_multiple_injection_race
TEST_CLEANUP=cleanup_multiple_injection_race
TEST_CONTROLLER=control_multiple_injection_race
TEST_CHECKER=check_multiple_injection_race
TEST_FLAGS=
TEST_RETRYABLE=
EXPECTED_RETURN_CODE="START EXIT"
FIXEDBY_SUBJECT="mm: soft-offline: don't free target page in successful page migration|mm/memory-failure: introduce get_hwpoison_page() for consistent refcount handling|mm/memory-failure: split thp earlier in memory error handling|mm/hwpoison-inject: check PageLRU of hpage|mm/hwpoison-inject: fix refcounting in no-injection case|mm/memory-failure: call shake_page() when error hits thp tail page|mm: hugetlb: cleanup using paeg_huge_active()|mm: hugetlb: introduce page_huge_active"
FIXEDBY_PATCH_SEARCH_DATE="Apr 1 2015"
do_test_async

#
# anonymous
#

TEST_TITLE=multiple_injection_anonymous_mce-srao
TARGET_PAGEFLAG=anonymous
INJECT_TYPE=mce-srao
TEST_PREPARE=prepare_multiple_injection_race_tmp
TEST_CLEANUP=cleanup_multiple_injection_race_tmp
TEST_CONTROLLER=control_multiple_injection_race_tmp
TEST_CHECKER=check_multiple_injection_race
TEST_FLAGS=devel
TEST_RETRYABLE=
EXPECTED_RETURN_CODE="START EXIT"
TEST_PROGRAM="$memeater_random"
do_test_sync

TEST_TITLE=multiple_injection_anonymous_hard-offline
TARGET_PAGEFLAG=anonymous
INJECT_TYPE=hard-offline
TEST_PREPARE=prepare_multiple_injection_race_tmp
TEST_CLEANUP=cleanup_multiple_injection_race_tmp
TEST_CONTROLLER=control_multiple_injection_race_tmp
TEST_CHECKER=check_multiple_injection_race
TEST_FLAGS=
TEST_RETRYABLE=
EXPECTED_RETURN_CODE="START EXIT"
TEST_PROGRAM="$memeater_random"
do_test_sync

TEST_TITLE=multiple_injection_anonymous_soft-offline
TARGET_PAGEFLAG=anonymous
INJECT_TYPE=soft-offline
TEST_PREPARE=prepare_multiple_injection_race_tmp
TEST_CLEANUP=cleanup_multiple_injection_race_tmp
TEST_CONTROLLER=control_multiple_injection_race_tmp
TEST_CHECKER=check_multiple_injection_race
TEST_FLAGS=
TEST_RETRYABLE=
EXPECTED_RETURN_CODE="START EXIT"
TEST_PROGRAM="$memeater_random"
do_test_sync

TEST_TITLE=multiple_injection_anonymous_hard-soft
TARGET_PAGEFLAG=anonymous
INJECT_TYPE=hard-soft
TEST_PREPARE=prepare_multiple_injection_race_tmp
TEST_CLEANUP=cleanup_multiple_injection_race_tmp
TEST_CONTROLLER=control_multiple_injection_race_tmp
TEST_CHECKER=check_multiple_injection_race
TEST_FLAGS=
TEST_RETRYABLE=
EXPECTED_RETURN_CODE="START EXIT"
TEST_PROGRAM="$memeater_random"
do_test_sync

#
# free hugepage
#

TEST_TITLE=hugetlb_multiple_injection_free_hugepage_mce-srao
INJECT_TYPE=mce-srao
TARGET_PAGEFLAG="huge,compound_head,mmap=huge,compound_head"
TEST_PREPARE=prepare_hugetlb_race
TEST_CLEANUP=cleanup_hugetlb_race
TEST_CONTROLLER=control_multiple_injection_race
TEST_CHECKER=check_multiple_injection_race
TEST_FLAGS=devel
TEST_RETRYABLE=
EXPECTED_RETURN_CODE="START EXIT"
FIXEDBY_SUBJECT="mm: soft-offline: don't free target page in successful page migration|mm/memory-failure: introduce get_hwpoison_page() for consistent refcount handling|mm/memory-failure: split thp earlier in memory error handling|mm/hwpoison-inject: check PageLRU of hpage|mm/hwpoison-inject: fix refcounting in no-injection case|mm/memory-failure: call shake_page() when error hits thp tail page|mm: hugetlb: cleanup using paeg_huge_active()|mm: hugetlb: introduce page_huge_active"
FIXEDBY_PATCH_SEARCH_DATE="Apr 1 2015"
do_test_async

TEST_TITLE=hugetlb_multiple_injection_free_hugepage_hard-offline
INJECT_TYPE=hard-offline
TARGET_PAGEFLAG="huge,compound_head,mmap=huge,compound_head"
TEST_PREPARE=prepare_hugetlb_race
TEST_CLEANUP=cleanup_hugetlb_race
TEST_CONTROLLER=control_multiple_injection_race
TEST_CHECKER=check_multiple_injection_race
TEST_FLAGS=
TEST_RETRYABLE=
EXPECTED_RETURN_CODE="START EXIT"
FIXEDBY_SUBJECT="mm: soft-offline: don't free target page in successful page migration|mm/memory-failure: introduce get_hwpoison_page() for consistent refcount handling|mm/memory-failure: split thp earlier in memory error handling|mm/hwpoison-inject: check PageLRU of hpage|mm/hwpoison-inject: fix refcounting in no-injection case|mm/memory-failure: call shake_page() when error hits thp tail page|mm: hugetlb: cleanup using paeg_huge_active()|mm: hugetlb: introduce page_huge_active"
FIXEDBY_PATCH_SEARCH_DATE="Apr 1 2015"
do_test_async

TEST_TITLE=hugetlb_multiple_injection_free_hugepage_soft-offline
INJECT_TYPE=soft-offline
TARGET_PAGEFLAG="huge,compound_head,mmap=huge,compound_head"
TEST_PREPARE=prepare_hugetlb_race
TEST_CLEANUP=cleanup_hugetlb_race
TEST_CONTROLLER=control_multiple_injection_race
TEST_CHECKER=check_multiple_injection_race
TEST_FLAGS=
TEST_RETRYABLE=
EXPECTED_RETURN_CODE="START EXIT"
FIXEDBY_SUBJECT="mm: soft-offline: don't free target page in successful page migration|mm/memory-failure: introduce get_hwpoison_page() for consistent refcount handling|mm/memory-failure: split thp earlier in memory error handling|mm/hwpoison-inject: check PageLRU of hpage|mm/hwpoison-inject: fix refcounting in no-injection case|mm/memory-failure: call shake_page() when error hits thp tail page|mm: hugetlb: cleanup using paeg_huge_active()|mm: hugetlb: introduce page_huge_active"
FIXEDBY_PATCH_SEARCH_DATE="Apr 1 2015"
do_test_async

TEST_TITLE=hugetlb_multiple_injection_free_hugepage_hard-soft
INJECT_TYPE=hard-soft
TARGET_PAGEFLAG="huge,compound_head,mmap=huge,compound_head"
TEST_PREPARE=prepare_hugetlb_race
TEST_CLEANUP=cleanup_hugetlb_race
TEST_CONTROLLER=control_multiple_injection_race
TEST_CHECKER=check_multiple_injection_race
TEST_FLAGS=
TEST_RETRYABLE=
EXPECTED_RETURN_CODE="START EXIT"
FIXEDBY_SUBJECT="mm: soft-offline: don't free target page in successful page migration|mm/memory-failure: introduce get_hwpoison_page() for consistent refcount handling|mm/memory-failure: split thp earlier in memory error handling|mm/hwpoison-inject: check PageLRU of hpage|mm/hwpoison-inject: fix refcounting in no-injection case|mm/memory-failure: call shake_page() when error hits thp tail page|mm: hugetlb: cleanup using paeg_huge_active()|mm: hugetlb: introduce page_huge_active"
FIXEDBY_PATCH_SEARCH_DATE="Apr 1 2015"
do_test_async

#
# active hugepage
#

TEST_TITLE=hugetlb_multiple_injection_active_hugepage_mce-srao
TARGET_PAGEFLAG="huge,compound_head,mmap=huge,compound_head,mmap"
INJECT_TYPE=mce-srao
TEST_PREPARE=prepare_multiple_injection_race_tmp
TEST_CLEANUP=cleanup_multiple_injection_race_tmp
TEST_CONTROLLER=control_multiple_injection_race_tmp
TEST_CHECKER=check_multiple_injection_race
TEST_FLAGS=devel
TEST_RETRYABLE=
EXPECTED_RETURN_CODE="START EXIT"
TEST_PROGRAM="$memeater_random"
do_test_sync

TEST_TITLE=hugetlb_multiple_injection_active_hugepage_hard-offline
TARGET_PAGEFLAG="huge,compound_head,mmap=huge,compound_head,mmap"
INJECT_TYPE=hard-offline
TEST_PREPARE=prepare_multiple_injection_race_tmp
TEST_CLEANUP=cleanup_multiple_injection_race_tmp
TEST_CONTROLLER=control_multiple_injection_race_tmp
TEST_CHECKER=check_multiple_injection_race
TEST_FLAGS=
TEST_RETRYABLE=
EXPECTED_RETURN_CODE="START EXIT"
TEST_PROGRAM="$memeater_random"
do_test_sync

TEST_TITLE=hugetlb_multiple_injection_active_hugepage_soft-offline
TARGET_PAGEFLAG="huge,compound_head,mmap=huge,compound_head,mmap"
INJECT_TYPE=soft-offline
TEST_PREPARE=prepare_multiple_injection_race_tmp
TEST_CLEANUP=cleanup_multiple_injection_race_tmp
TEST_CONTROLLER=control_multiple_injection_race_tmp
TEST_CHECKER=check_multiple_injection_race
TEST_FLAGS=
TEST_RETRYABLE=
EXPECTED_RETURN_CODE="START EXIT"
TEST_PROGRAM="$memeater_random"
do_test_sync

TEST_TITLE=hugetlb_multiple_injection_active_hugepage_hard-soft
TARGET_PAGEFLAG="huge,compound_head,mmap=huge,compound_head,mmap"
INJECT_TYPE=hard-soft
TEST_PREPARE=prepare_multiple_injection_race_tmp
TEST_CLEANUP=cleanup_multiple_injection_race_tmp
TEST_CONTROLLER=control_multiple_injection_race_tmp
TEST_CHECKER=check_multiple_injection_race
TEST_FLAGS=
TEST_RETRYABLE=
EXPECTED_RETURN_CODE="START EXIT"
TEST_PROGRAM="$memeater_random"
do_test_sync

#
# thp
#

TEST_TITLE=multiple_injection_thp_mce-srao
TARGET_PAGEFLAG="thp=thp"
INJECT_TYPE=mce-srao
TEST_PREPARE=prepare_multiple_injection_race_tmp
TEST_CLEANUP=cleanup_multiple_injection_race_tmp
TEST_CONTROLLER=control_multiple_injection_race_tmp
TEST_CHECKER=check_multiple_injection_race
TEST_FLAGS=devel
TEST_RETRYABLE=
EXPECTED_RETURN_CODE="START EXIT"
TEST_PROGRAM="$memeater_random"
do_test_sync

TEST_TITLE=multiple_injection_thp_hard-offline
TARGET_PAGEFLAG="thp=thp"
INJECT_TYPE=hard-offline
TEST_PREPARE=prepare_multiple_injection_race_tmp
TEST_CLEANUP=cleanup_multiple_injection_race_tmp
TEST_CONTROLLER=control_multiple_injection_race_tmp
TEST_CHECKER=check_multiple_injection_race
TEST_FLAGS=
TEST_RETRYABLE=
EXPECTED_RETURN_CODE="START EXIT"
TEST_PROGRAM="$memeater_random"
do_test_sync

TEST_TITLE=multiple_injection_thp_soft-offline
TARGET_PAGEFLAG="thp=thp"
INJECT_TYPE=soft-offline
TEST_PREPARE=prepare_multiple_injection_race_tmp
TEST_CLEANUP=cleanup_multiple_injection_race_tmp
TEST_CONTROLLER=control_multiple_injection_race_tmp
TEST_CHECKER=check_multiple_injection_race
TEST_FLAGS=
TEST_RETRYABLE=
EXPECTED_RETURN_CODE="START EXIT"
TEST_PROGRAM="$memeater_random"
do_test_sync

TEST_TITLE=multiple_injection_thp_hard-soft
TARGET_PAGEFLAG="thp=thp"
INJECT_TYPE=hard-soft
TEST_PREPARE=prepare_multiple_injection_race_tmp
TEST_CLEANUP=cleanup_multiple_injection_race_tmp
TEST_CONTROLLER=control_multiple_injection_race_tmp
TEST_CHECKER=check_multiple_injection_race
TEST_FLAGS=
TEST_RETRYABLE=
EXPECTED_RETURN_CODE="START EXIT"
TEST_PROGRAM="$memeater_random"
do_test_sync

DIFFERENT_PFNS=true

TEST_TITLE=multiple_injection_thp_mce-srao_different_pfns
INJECT_TYPE=mce-srao
TARGET_PAGEFLAG="thp,compound_head=thp,compound_head"
TEST_PREPARE=prepare_multiple_injection_race_tmp
TEST_CLEANUP=cleanup_multiple_injection_race_tmp
TEST_CONTROLLER=control_multiple_injection_race_tmp
TEST_CHECKER=check_multiple_injection_race
TEST_FLAGS=devel
TEST_RETRYABLE=
EXPECTED_RETURN_CODE="START EXIT"
TEST_PROGRAM="$memeater_random"
do_test_sync

DIFFERENT_PFNS=true

TEST_TITLE=multiple_injection_thp_hard-offline_different_pfns
INJECT_TYPE=hard-offline
TARGET_PAGEFLAG="thp,compound_head=thp,compound_head"
TEST_PREPARE=prepare_multiple_injection_race_tmp
TEST_CLEANUP=cleanup_multiple_injection_race_tmp
TEST_CONTROLLER=control_multiple_injection_race_tmp
TEST_CHECKER=check_multiple_injection_race
TEST_FLAGS=
TEST_RETRYABLE=
EXPECTED_RETURN_CODE="START EXIT"
TEST_PROGRAM="$memeater_random"
do_test_sync

DIFFERENT_PFNS=true

TEST_TITLE=multiple_injection_thp_soft-offline_different_pfns
INJECT_TYPE=soft-offline
TARGET_PAGEFLAG="thp,compound_head=thp,compound_head"
TEST_PREPARE=prepare_multiple_injection_race_tmp
TEST_CLEANUP=cleanup_multiple_injection_race_tmp
TEST_CONTROLLER=control_multiple_injection_race_tmp
TEST_CHECKER=check_multiple_injection_race
TEST_FLAGS=
TEST_RETRYABLE=
EXPECTED_RETURN_CODE="START EXIT"
TEST_PROGRAM="$memeater_random"
do_test_sync

DIFFERENT_PFNS=true

TEST_TITLE=multiple_injection_thp_hard-soft_different_pfns
INJECT_TYPE=hard-soft
TARGET_PAGEFLAG="thp,compound_head=thp,compound_head"
TEST_PREPARE=prepare_multiple_injection_race_tmp
TEST_CLEANUP=cleanup_multiple_injection_race_tmp
TEST_CONTROLLER=control_multiple_injection_race_tmp
TEST_CHECKER=check_multiple_injection_race
TEST_FLAGS=
TEST_RETRYABLE=
EXPECTED_RETURN_CODE="START EXIT"
TEST_PROGRAM="$memeater_random"
do_test_sync

unset DIFFERENT_PFNS

#
# map/munmap iteration
#
DIFFERENT_PFNS=true

TEST_TITLE=multiple_injection_thp_map_unmap_iteration
INJECT_TYPE=hard-soft
TARGET_PAGEFLAG="thp,compound_head=thp,compound_head"
TEST_PREPARE=prepare_multiple_injection_race_tmp
TEST_CLEANUP=cleanup_multiple_injection_race_tmp
TEST_CONTROLLER=control_multiple_injection_race_tmp
TEST_CHECKER=check_multiple_injection_race
TEST_FLAGS=devel
TEST_RETRYABLE=
EXPECTED_RETURN_CODE="START EXIT"
TEST_PROGRAM="$memeater_random -m"
do_test_sync


# MULTIINJ_ITERATIONS=30
#
# TEST_TITLE=multiple_injection_thp_hard-offline_background
# INJECT_TYPE=hard-offline
# TARGET_PAGEFLAG="thp=thp"
# TEST_PREPARE=prepare_multiple_injection_thp_background
# TEST_CLEANUP=cleanup_multiple_injection_thp_background
# TEST_CONTROLLER=control_multiple_injection_race
# TEST_CHECKER=check_multiple_injection_race
# TEST_FLAGS=
# TEST_RETRYABLE=
# EXPECTED_RETURN_CODE="START EXIT"
# do_test_async
#
# TEST_TITLE=multiple_injection_thp_soft-offline_background
# INJECT_TYPE=soft-offline
# TARGET_PAGEFLAG="thp=thp"
# TEST_PREPARE=prepare_multiple_injection_thp_background
# TEST_CLEANUP=cleanup_multiple_injection_thp_background
# TEST_CONTROLLER=control_multiple_injection_race
# TEST_CHECKER=check_multiple_injection_race
# TEST_FLAGS=
# TEST_RETRYABLE=
# EXPECTED_RETURN_CODE="START EXIT"
# do_test_async
#
# TEST_TITLE=multiple_injection_thp_hard-soft_background
# INJECT_TYPE=hard-soft
# TARGET_PAGEFLAG="thp=thp"
# TEST_PREPARE=prepare_multiple_injection_thp_background
# TEST_CLEANUP=cleanup_multiple_injection_thp_background
# TEST_CONTROLLER=control_multiple_injection_race
# TEST_CHECKER=check_multiple_injection_race
# TEST_FLAGS=
# TEST_RETRYABLE=
# EXPECTED_RETURN_CODE="START EXIT"
# do_test_async
