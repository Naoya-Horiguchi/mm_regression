#! BACKEND: buddy hugetlb_free anonymous pagecache hugetlb_anon hugetlb_shmem hugetlb_file ksm thp zero huge_zero
#! ERROR_TYPE: mce-srao hard-offline soft-offline

. $TRDIR/setup_mce_test.sh

EXPECTED_RETURN_CODE="START EXIT"

BACKEND=__MARK_BACKEND
ERROR_TYPE=__MARK_ERROR_TYPE
TARGET_PAGEFLAGS=$(get_backend_pageflags $BACKEND)

if [[ "$BACKEND" =~ (ksm|zero) ]] ; then
	SKIP_THIS_TEST=true
fi

THP=100
HUGETLB=300
HUGEPAGESIZE=2048
if [ "$BACKEND" == ksm ] ; then
	KSM=true
fi

TIMEOUT=5

case "$BACKEND" in
	buddy|zero|huge_zero)
		PRIORITY=15 # low priority
		;;
esac

random_poison() {
	echo "random_poison thread running ..."
	while read line ; do
		$MCEINJECT -e "$ERROR_TYPE" -a "$line" > /dev/null 2>&1
		[ "$ERROR_TYPE" == mce-srao ] && sleep 1
	done < $TMPD/target_pfns
}

random_unpoison() {
	echo "random_unpoison thread running ..."
	while true ; do
		all_unpoison > /dev/null 2>&1
	done
}

_control() {
	local pid=

	$test_alloc_generic -B $BACKEND -N 32 -L 'mmap access'
	echo_log "$test_alloc_generic -B $BACKEND -N 32 -L 'mmap access busyloop' &"
	$test_alloc_generic -B $BACKEND -N 32 -L 'mmap access busyloop' &
	pid=$!
	sleep 0.1
	if ! check_process_status $pid ; then
		set_return_code ERROR
		return
	fi
	get_mm_stats 1 $pid

	random_unpoison $pid &
	local pid_unpoison=$!
	echo_log "background unpoisoner ($pid_unpoison) running ..."
	echo_log "target pageflags: $TARGET_PAGEFLAGS"

	# if backend is pagecache, takes a few second to be parepared. so better
	# method to wait is necessary.
	sleep 2
	case "$BACKEND" in
		buddy|hugetlb_free)
			$PAGETYPES -Nrl -b "$TARGET_PAGEFLAGS" | grep -v offset | \
				cut -f1 | sed -e 's/^/0x/' > $TMPD/target_pfns
			;;
		*)
			$PAGETYPES -Nrl -b "$TARGET_PAGEFLAGS" -p $pid -a 0x700000000+0x10000000 \
				| grep -v offset | cut -f2 | sed -e 's/^/0x/' > $TMPD/target_pfns
			;;
	esac

	random_poison $pid &
	local pid_poison=$!
	if [ ! -s $TMPD/target_pfns ] ; then
		set_return_code NO_TARGET_PFN
	else
		echo_log "Running poison/unpoison threads for $TIMEOUT seconds ..."
		sleep $TIMEOUT
	fi
	kill -9 $pid_poison $pid_unpoison 2> /dev/null
	get_mm_stats 2 $pid
	echo "kill -SIGUSR1 $pid"
	check_process_status $pid && kill -SIGUSR1 $pid

	cleanup_hugetlb_config

	set_return_code EXIT
}
