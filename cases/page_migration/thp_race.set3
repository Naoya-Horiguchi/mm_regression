# #!2 MIGRATE_SRC: migratepages
# #!2 RACE_SRC: race_with_gup race_with_process_vm_access race_with_map_fault_unmap race_with_fork race_with_mremap race_with_procpid
# # race_with_madv_free
#
# #!3 MIGRATE_SRC: mbind
# #!3 OPERATION: partial

#!1 THP_TYPE: single_mapped double_mapped mbind pte_mapped
#! {"thp" => "single_mapped"}
#! {"thp" => "double_mapped"}
#! {"thp" => "mbind"}
#! {"thp" => "pte_mapped"}

. $TRDIR/lib/setup_page_migration.sh

[ ! "$HARD_RETRY" ] && HARD_RETRY=20

NUMA_NODE=2
THP=10

BACKEND=thp

EXPECTED_RETURN_CODE="EXIT"

read_procpid() {
	$PAGETYPES -p $pid -Nlr -a 0x700000000+0x10000000 > /dev/null
	cat /proc/$pid/numa_maps > /dev/null
	cat /proc/$pid/maps > /dev/null
	cat /proc/$pid/smaps > /dev/null
}

migrate_pingpong() {
	local pid=$1

	do_migratepages $pid 0 1 2> /dev/null
	do_migratepages $pid 1 0 2> /dev/null
}

background_iteration() {
	local pid=$1
	local func=$2

	while true ; do
		$func $pid

		if ! check_process_status $pid ; then
			break
		fi
	done
}

<% if param["thp"] == "pte_mapped" %>
TEST_PROGRAM="lib/test_alloc_generic -B thp -N 1 -L 'mmap_numa:preferred_cpu_node=0:preferred_mem_node=0 access:wait_after split_thp:only_pmd busyloop exit:wait_before'"
_control() {
    local pid="$1"
    local line="$2"

    echo_log "$line"
    case "$line" in
		"after_access")
			get_mm_stats 0 $pid $(pgrep -P $pid)
			background_iteration $pid clear_soft_dirty > /dev/null 2>&1 &
            kill -SIGUSR1 $pid
            ;;
        "before_exit")
            set_return_code EXIT
            kill -SIGUSR1 $pid
            return 0
            ;;
		"entering busy loop")
			get_mm_stats 1 $pid $(pgrep -P $pid)
			echo "calling do_migratepages for $pid"
			do_migratepages $pid
			kill -SIGUSR1 $pid
			;;
        *)
            ;;
    esac
    return 1
}
<% else %>
_control() {
	for i in $(seq 10) ; do
		<% if param["thp"] == "mbind" %>
			lib/test_alloc_generic -B thp -N $THP -L "mmap_numa:preferred_cpu_node=0:preferred_mem_node=0 access:wait_after=200000 mbind busyloop" &
			local pid=$!
			background_iteration $pid clear_soft_dirty > /dev/null &
			sleep 0.3
			kill -SIGUSR1 $pid 2> /dev/null
			continue
		<% elsif param["thp"] == "single_mapped" %>
			lib/test_alloc_generic -B thp -N $THP -L "mmap access busyloop" &
		<% elsif param["thp"] == "double_mapped" %>
			lib/test_alloc_generic -B thp -N $THP -L "mmap access fork busyloop" &
		<% end %>
		local pid=$!
		sleep 0.2
		background_iteration $pid migrate_pingpong > /dev/null &
		background_iteration $pid clear_soft_dirty > /dev/null 2>&1 &
		sleep 0.5

		kill -SIGUSR1 $pid 2> /dev/null
	done
	set_return_code EXIT
}
<% end %>

