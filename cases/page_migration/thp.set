#!2 MIGRATE_SRC: migratepages
#!2 RACE_SRC: race_with_gup race_with_process_vm_access race_with_map_fault_unmap race_with_fork race_with_mremap

#!3 MIGRATE_SRC: mbind
#!3 OPERATION: partial

. $TRDIR/setup_page_migration.sh

MIGRATE_SRC=__MARK_MIGRATE_SRC
RACE_SRC=__MARK_RACE_SRC

NUMA_NODE=2
THP=10

BACKEND=thp

INIT_NUMA_BALANCING=$(cat /proc/sys/kernel/numa_balancing)
AUTO_NUMA=

if [ "$RACE_SRC" == race_with_gup ] ; then
	EXPECTED_RETURN_CODE="START MIGRATION_PASSED HUGEPAGE_DISAPPEARED PMD_SPLIT EXIT"
	TEST_PROGRAM="$test_alloc_generic -a numa_prepared -o page_migration -s $MIGRATE_SRC -B thp -b -d work -N $THP -M $(get_backend_pageflags $BACKEND) -w start -w after_allocate -w before_free -w exit"
	# BUG_ON in mm/vmscan.c:1430
elif [ "$RACE_SRC" == race_with_process_vm_access ] ; then
	# TODO: really need busyloop flag?
	EXPECTED_RETURN_CODE="START MIGRATION_PASSED HUGEPAGE_MIGRATED THP_NOT_SPLIT EXIT"
	TEST_PROGRAM="$test_alloc_generic -a numa_prepared -o process_vm_access -B thp -b -d work -N $THP -M $(get_backend_pageflags $BACKEND) -w start -w after_allocate -w before_free -w exit"
elif [ "$RACE_SRC" == race_with_map_fault_unmap ] ; then
	_control() {
		for i in $(seq 5) ; do
			$test_alloc_generic -a iterate_mapping -B thp -N 10 &
			local pid=$!
			sleep 0.3
			for j in $(seq 100) ; do
				$PAGETYPES -p $pid -Nl -b thp,compound_head=thp,compound_head | grep -v offset > $TMPD/pagetypes1
				do_migratepages $pid 0 1
				$PAGETYPES -p $pid -Nl -b thp,compound_head=thp,compound_head | grep -v offset > $TMPD/pagetypes2
				do_migratepages $pid 1 0
				# echo $j
				# cat $TMPD/pagetypes1 $TMPD/pagetypes2
				diff -u $TMPD/pagetypes1 $TMPD/pagetypes2 >&2
			done
			kill -SIGUSR1 $pid 2> /dev/null
		done
		set_return_code EXIT
	}
	EXPECTED_RETURN_CODE="START EXIT"
elif [ "$RACE_SRC" == race_with_fork ] ; then
	# BUG_ON in cow path
	_control() {
		for i in $(seq 5) ; do
			$test_alloc_generic -a allocate_exit -o fork_stress -B thp -N $THP &
			local pid=$!
			sleep 0.3
			for j in $(seq 100) ; do
				$PAGETYPES -p $pid -Nl -b thp,compound_head=thp,compound_head | grep -v offset > $TMPD/pagetypes1
				do_migratepages $pid 0 1
				$PAGETYPES -p $pid -Nl -b thp,compound_head=thp,compound_head | grep -v offset > $TMPD/pagetypes2
				do_migratepages $pid 1 0
				# echo $j
				# cat $TMPD/pagetypes1 $TMPD/pagetypes2
				diff -u $TMPD/pagetypes1 $TMPD/pagetypes2 >&2
			done
			kill -SIGUSR1 $pid 2> /dev/null
		done
		set_return_code EXIT
	}
	EXPECTED_RETURN_CODE="START EXIT"
else
	# no race mbind/partial case
	EXPECTED_RETURN_CODE="START MIGRATION_PASSED HUGEPAGE_DISAPPEARED PMD_SPLIT EXIT"
	TEST_PROGRAM="$test_alloc_generic -a numa_prepared -o page_migration -s mbind -B thp -b -P -d work -N $THP -M $(get_backend_pageflags $BACKEND) -w start -w after_allocate -w before_free -w exit"
fi
