#!2 MIGRATE_SRC: migratepages
#!2 RACE_SRC: race_with_gup race_with_process_vm_access race_with_map_fault_unmap race_with_fork race_with_mremap

#!3 MIGRATE_SRC: mbind
#!3 OPERATION: partial

. $TRDIR/setup_page_migration.sh

MIGRATE_SRC=__MARK_MIGRATE_SRC
RACE_SRC=__MARK_RACE_SRC

[ ! "$SOFT_RETRY" ] && SOFT_RETRY=5

NUMA_NODE=2
THP=10

BACKEND=thp

if [ "$RACE_SRC" == race_with_gup ] ; then
	EXPECTED_RETURN_CODE="START MIGRATION_PASSED HUGEPAGE_MIGRATED THP_NOT_SPLIT EXIT"
	# madv_soft calls get_user_pages()
	TEST_PROGRAM="$test_alloc_generic -B $BACKEND -N $THP -b -L 'start:wait_after mmap_numa access:wait_after madv_soft munmap:wait_before exit:wait_before'"
	# BUG_ON in mm/vmscan.c:1430
elif [ "$RACE_SRC" == race_with_process_vm_access ] ; then
	# TODO: really need busyloop flag?
	EXPECTED_RETURN_CODE="START MIGRATION_PASSED HUGEPAGE_MIGRATED THP_NOT_SPLIT EXIT"
	TEST_PROGRAM="$test_alloc_generic -B $BACKEND -N $THP -L 'start:wait_after mmap_numa access:wait_after process_vm_access:busyloop munmap:wait_before exit:wait_before'"
elif [ "$RACE_SRC" == race_with_map_fault_unmap ] ; then
	_control() {
		for i in $(seq 5) ; do
			$test_alloc_generic -B thp -N 10 -L iterate_mapping &
			local pid=$!
			sleep 0.3
			for j in $(seq 100) ; do
				$PAGETYPES -p $pid -Nl -b thp,compound_head=thp,compound_head | grep -v offset > $TMPD/pagetypes1
				do_migratepages $pid 0 1
				$PAGETYPES -p $pid -Nl -b thp,compound_head=thp,compound_head | grep -v offset > $TMPD/pagetypes2
				do_migratepages $pid 1 0
				# echo $j
				# cat $TMPD/pagetypes1 $TMPD/pagetypes2
				diff -u $TMPD/pagetypes1 $TMPD/pagetypes2 >&2
			done
			kill -SIGUSR1 $pid 2> /dev/null
		done
		set_return_code EXIT
	}
	EXPECTED_RETURN_CODE="START EXIT"
elif [ "$RACE_SRC" == race_with_fork ] ; then
	# BUG_ON in cow path
	_control() {
		for i in $(seq 5) ; do
			$test_alloc_generic -B thp -N $THP -L "start mmap access fork_stress" &
			local pid=$!
			sleep 0.3
			for j in $(seq 100) ; do
				# get_pagetypes $pid pagetypes.1 -Nrlb thp,compound_head=thp,compound_head > /dev/null
				do_migratepages $pid 0 1
				# get_pagetypes $pid pagetypes.2 -Nrlb thp,compound_head=thp,compound_head > /dev/null
				do_migratepages $pid 1 0
				# diff -u $TMPD/pagetypes.1 $TMPD/pagetypes.2 >&2
			done
			kill -SIGUSR1 $pid 2> /dev/null
		done
		set_return_code EXIT
	}
	EXPECTED_RETURN_CODE="START EXIT"
elif [ "$RACE_SRC" == race_with_mremap ] ; then
	true
else
	# no race mbind/partial case
	EXPECTED_RETURN_CODE="START MIGRATION_PASSED HUGEPAGE_DISAPPEARED THP_SPLIT EXIT"
	TEST_PROGRAM="$test_alloc_generic -B $BACKEND -N $THP -b -L 'start:wait_after mmap_numa access:wait_after mbind:hp_partial munmap:wait_before exit:wait_before'"
fi
