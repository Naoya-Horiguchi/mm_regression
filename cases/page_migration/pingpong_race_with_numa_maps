. $TRDIR/setup_page_migration.sh

NUMA_NODE=2
HUGEPAGESIZE=2048 # kB
HUGETLB=500
HUGETLB_MOUNT=$WDIR/mount
HUGETLB_FILE=$HUGETLB_MOUNT/testfile
EXPECTED_RETURN_CODE="START EXIT"

PINGPONG_NR_PROC=4
PINGPONG_DURATION=10

NUMA_MAPS_READER=$TMPD/read_numa_maps.sh
cat <<EOF > $NUMA_MAPS_READER
while true ; do
	for pid in \$@ true ; do
	    cat /proc/\$pid/numa_maps > /dev/null 2>&1
	done
done
EOF

_control() {
    local i=0
    local cmd="bash ${NUMA_MAPS_READER}"
    local pids=""
    local reader_pid=
    echo_log "start $PINGPONG_NR_PROC hugepage_pingpong processes"
	grep ^pgmigrate /proc/vmstat | tee $TMPD/vmstat.pgmigrate1
    for i in $(seq $PINGPONG_NR_PROC) ; do
		echo "$test_alloc_generic -v -a allocate_exit -o mbind_pingpong -N 10 -d work -B pagecache -B anonymous -B thp -B hugetlb_anon -B hugetlb_shmem > $TMPD/fuz.out$i 2>&1 &"
		$test_alloc_generic -a allocate_exit -o mbind_pingpong -N 10 -d work -B pagecache -B anonymous -B thp -B hugetlb_anon -B hugetlb_shmem > $TMPD/fuz.out$i 2>&1 &
        pids="$pids $!"
    done
    eval "$cmd $pids" &
    reader_pid=$!
    sleep $PINGPONG_DURATION
    kill -SIGKILL $reader_pid
    kill -SIGUSR1 $pids
	grep ^pgmigrate /proc/vmstat | tee $TMPD/vmstat.pgmigrate2
    set_return_code EXIT
}
