#!1 BACKEND: hugetlb_anon
#!1 MIGRATE_SRC: migratepages mbind move_pages madv_soft
#!1 BACKGROUND: none
#!1 OVERCOMMIT: overcommit noovercommit

#!2 BACKEND: hugetlb_anon
#!2 MIGRATE_SRC: migratepages mbind move_pages madv_soft
#!2 BACKGROUND: reserve
#!2 OVERCOMMIT: overcommit noovercommit

# "allocate0 + noovercommit" case is meaningless testcases because test program
# always fail to allocate hugepage from node 0 and killed by SIGBUS before trying
# to page migration.

#!30 BACKEND: hugetlb_anon
#!30 MIGRATE_SRC: migratepages mbind move_pages madv_soft
#!30 BACKGROUND: allocate0 allocate1
#!30 OVERCOMMIT: overcommit

#!31 BACKEND: hugetlb_anon
#!31 MIGRATE_SRC: migratepages mbind move_pages madv_soft
#!31 BACKGROUND: allocate1
#!31 OVERCOMMIT: noovercommit

#!40 BACKEND: hugetlb_anon
#!40 MIGRATE_SRC: hotremove
#!40 OPERATION_SRC: noop hwpoison busy

#!41 BACKEND: thp
#!41 MIGRATE_SRC: hotremove
#!41 OPERATION_SRC: noop hwpoison busy
# TODO busy case return code correct?

#!5 BACKEND: thp
#!5 MIGRATE_SRC: migratepages move_pages madv_soft mbind
#!5 OPERATION_SRC: busy idle

. $TRDIR/setup_page_migration.sh

MIGRATE_SRC=__MARK_MIGRATE_SRC
BACKEND=__MARK_BACKEND
BACKGROUND=__MARK_BACKGROUND
OPERATION_SRC=__MARK_OPERATION_SRC

SOFT_RETRY=5

if [ "$OPERATION_SRC" == busy ] ; then
	BUSYOPT=-b
fi

NUMA_NODE=2
HUGEPAGESIZE=2048 # kB

EXPECTED_RETURN_CODE=""

if [ "$MIGRATE_SRC" == hotremove ] ; then
	PIPETIMEOUT=60
fi

if [[ "$BACKEND" =~ hugetlb ]] && [ "$MIGRATE_SRC" != hotremove ] ; then
	HUGETLB=100
	if [ __MARK_OVERCOMMIT == overcommit ] ; then
		HUGETLB_OVERCOMMIT=10
		EXPECTED_RETURN_CODE="$EXPECTED_RETURN_CODE SET_OVERCOMMIT"
	fi

	if [ "$BACKGROUND" == reserve ] ; then
		EXPECTED_RETURN_CODE="$EXPECTED_RETURN_CODE RESERVE"
		RESERVE_HUGEPAGE=$[HUGETLB - 2]
	elif [ "$BACKGROUND" == allocate0 ] ; then
		ALLOCATE_HUGEPAGE=$[HUGETLB - 2]
		ALLOCATE_NODE=0
		EXPECTED_RETURN_CODE="$EXPECTED_RETURN_CODE ALLOCATE"
	elif [ "$BACKGROUND" == allocate1 ] ; then
		ALLOCATE_HUGEPAGE=$[HUGETLB - 2]
		ALLOCATE_NODE=1
		EXPECTED_RETURN_CODE="$EXPECTED_RETURN_CODE ALLOCATE"
	fi

	EXPECTED_RETURN_CODE="$EXPECTED_RETURN_CODE START"

	if [ "$BACKGROUND" == reserve ] ; then
		if [ __MARK_OVERCOMMIT == overcommit ] ; then
			EXPECTED_RETURN_CODE="$EXPECTED_RETURN_CODE MIGRATION_PASSED HUGEPAGE_MIGRATED"
		else
			EXPECTED_RETURN_CODE="$EXPECTED_RETURN_CODE MIGRATION_FAILED HUGEPAGE_NOT_MIGRATED"
		fi
	elif [ "$BACKGROUND" == allocate0 ] || [ "$BACKGROUND" == allocate1 ] ; then
		if [ __MARK_OVERCOMMIT == overcommit ] ; then
			EXPECTED_RETURN_CODE="$EXPECTED_RETURN_CODE MIGRATION_PASSED HUGEPAGE_MIGRATED"
		else
			EXPECTED_RETURN_CODE="$EXPECTED_RETURN_CODE MIGRATION_FAILED HUGEPAGE_NOT_MIGRATED"
		fi
	else
		EXPECTED_RETURN_CODE="$EXPECTED_RETURN_CODE MIGRATION_PASSED HUGEPAGE_MIGRATED"
	fi

	EXPECTED_RETURN_CODE="$EXPECTED_RETURN_CODE EXIT"

	TEST_PROGRAM="$test_alloc_generic -B $BACKEND -N 2 $BUSYOPT -L 'start:wait_after mmap_numa access:wait_after $MIGRATE_SRC munmap:wait_before exit:wait_before'"
elif [[ "$BACKEND" =~ hugetlb ]] ; then # hotremove
	HUGETLB=$[$MEMTOTAL/$HUGEPAGESIZE/2]
	HUGETLB_ALLOCATED=$[HUGETLB*4/5]
	# no pass fail ?
	EXPECTED_RETURN_CODE="START MIGRATION_PASSED HUGEPAGE_MIGRATED EXIT"
	TEST_PROGRAM="$test_alloc_generic -B $BACKEND -N $HUGETLB_ALLOCATED -M $(get_backend_pageflags hugetlb_mapped) $BUSYOPT -L 'start:wait_after mmap_numa access:wait_after $MIGRATE_SRC munmap:wait_before exit:wait_before'"
elif [[ "$BACKEND" =~ thp ]] && [ "$MIGRATE_SRC" == hotremove ] ; then
	THP=$[$MEMTOTAL/$HUGEPAGESIZE/2]
	THP_ALLOCATED=$[THP*4/5]
	EXPECTED_RETURN_CODE="START MIGRATION_PASSED HUGEPAGE_MIGRATED THP_NOT_SPLIT EXIT"

	# low-priority known issue
	if [ "$OPERATION_SRC" == hwpoison ] ; then
		SKIP_THIS_TEST=true
	fi

	TEST_PROGRAM="$test_alloc_generic -B $BACKEND -N $THP_ALLOCATED -M $(get_backend_pageflags $BACKEND) $BUSYOPT -L 'start:wait_after mmap_numa access:wait_after $MIGRATE_SRC munmap:wait_before exit:wait_before'"
elif  [[ "$BACKEND" =~ thp ]] ; then
	THP=10
	EXPECTED_RETURN_CODE="START MIGRATION_PASSED HUGEPAGE_MIGRATED THP_NOT_SPLIT EXIT"
	TEST_PROGRAM="$test_alloc_generic -B $BACKEND -N $THP $BUSYOPT -L 'start:wait_after mmap_numa access:wait_after $MIGRATE_SRC munmap:wait_before exit:wait_before'"
fi
