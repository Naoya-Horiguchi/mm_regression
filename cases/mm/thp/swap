#!1 THP_TYPE: base

. $TRDIR/lib/setup_memcg_for_swap.sh
. $TRDIR/lib/setup_thp.sh

MAPTYPE=mmap
FORK=
SPLIT_THP=

# #if __MARK_THP_TYPE == __MARK_THP_TYPE_shared_thp
# FORK=fork:wait_after
# #elif __MARK_THP_TYPE == __MARK_THP_TYPE_double_mapping
# FORK=fork:wait_after
# SPLIT_THP=split_thp:only_pmd
# #elif __MARK_THP_TYPE == __MARK_THP_TYPE_pmd_split
# SPLIT_THP=split_thp:only_pmd
# #elif __MARK_THP_TYPE == __MARK_THP_TYPE_thp_split
# SPLIT_THP=split_thp
# #endif

NR_THP=16 # 32MB

TEST_PROGRAM="lib/test_alloc_generic -B thp -N $NR_THP -L 'start:wait_after $MAPTYPE access $FORK $SPLIT_THP noop:wait_after access:tag=1:wait_after munmap exit:wait_before'"
EXPECTED_RETURN_CODE="INJECT EXIT"

_prepare() {
	if [ ! -f "/sys/kernel/mm/transparent_hugepage/swapin_enabled" ] ; then
		echo "swapin_enabled is not supported in this kernel ($(uname -r))" >&2
		return 1
	fi
	echo always > /sys/kernel/mm/transparent_hugepage/swapin_enabled
    set_thp_always

	# 400MB
	__prepare_memcg
	# __prepare_swap_device 10240 || return 1
    count_testcount
    if swapon -s | grep ^$swapfile > /dev/null ; then
        count_success "create swapfile"
    else
        count_failure "create swapfile"
    fi
	# 64M
    cgset -r memory.limit_in_bytes=0x4000000 test1 || return 1
    [ $? -ne 0 ] && echo "failed to cgset memory.limit_in_bytes" && return 1
	# 128M
    cgset -r memory.memsw.limit_in_bytes=0x8000000 test1 || return 1
    [ $? -ne 0 ] && echo "failed to cgset memory.memsw.limit_in_bytes" && return 1

    echo 3 > /proc/sys/vm/drop_caches
    return 0
}

_cleanup() {
	echo "clean up..."
	# __cleanup_swap_device
    __cleanup_memcg
}

_control() {
    local pid="$1"
    local line="$2"

    echo_log "$line"
    case "$line" in
        "after_start")
            cgclassify -g cpu,memory:test1 $pid || set_return_code CGCLASSIFY_FAIL
            kill -SIGUSR1 $pid
            ;;
        "after_noop")
			echo "--> trigger swapout"
			cgset -r memory.limit_in_bytes=0x1000000 test1 || set_return_code CGSET_FAIL
			get_mm_stats 1 $pid
            cgset -r memory.limit_in_bytes=0x8000000 test1 || set_return_code CGSET_FAIL
            kill -SIGUSR1 $pid
            ;;
        "after_access_1")
			echo "--> trigger swapin"
			get_mm_stats 2 $pid
            kill -SIGUSR1 $pid
            ;;
		"before_exit")
            kill -SIGUSR1 $pid
            set_return_code EXIT
            return 0
            ;;
        *)
            ;;
    esac
    return 1
}

_check() {
    FALSENEGATIVE=true
    count_testcount
    if [ "$(grep ^Swap: $TMPD/smaps.1 2> /dev/null | awk '{print $2}')" -gt 0 ] ; then
        count_success "swap used"
    else
        count_failure "swap not used"
    fi
    count_testcount
    if [ "$(grep ^Swap: $TMPD/smaps.2 2> /dev/null | awk '{print $2}')" -eq 0 ] ; then
        count_success "swapped in forcibly"
    else
        count_failure "swap still remains ($(grep ^Swap: $TMPD/smaps.2 | awk '{print $2}') kB) after madvise(MADV_WILLNEED)"
    fi
    FALSENEGATIVE=false

    count_testcount
    local sc1=$(grep ^SwapCached: $TMPD/meminfo.1 2> /dev/null | awk '{print $2}')
    local sc2=$(grep ^SwapCached: $TMPD/meminfo.2 2> /dev/null | awk '{print $2}')
    if [ "$sc1" -lt "$sc2" ] ; then
        count_success "some swap data is loaded on swapcache forcibly"
    else
        count_failure "swapin didn't work (before $sc1, after $sc2)"
    fi
}
