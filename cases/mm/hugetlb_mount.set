#!1 MOUNT_OPTION: min_size min_max_size

. $TRDIR/setup_mmgeneric.sh

HUGETLB=100

if [ __MARK_MOUNT_OPTION == min_size ] ; then
	EXPECTED_RETURN_CODE="START RESERVED RESV_CONSUMED RESV_USEDUP RESV_REVERTED EXIT"
	MOUNT_OPTION="min_size=10M"
elif [ __MARK_MOUNT_OPTION == min_max_size ] ; then
	EXPECTED_RETURN_CODE="START RESERVED RESV_CONSUMED RESV_REVERTED EXIT"
	MOUNT_OPTION="min_size=10M,size=20M"
fi

_control() {
	local tmp_hugetlb_mount=$(mktemp -d)
	show_hugetlb_pool

	local mountcmd="mount -t hugetlbfs -o $MOUNT_OPTION none $tmp_hugetlb_mount"
	echo $mountcmd
	$mountcmd
	if [ $? -ne 0 ] ; then
		echo "mount failed"
		set_return_code MOUNT_FAILED
		return
	fi
	show_hugetlb_pool
	if [ "$(get_hugepage_reserved)" -eq 5 ] ; then
		set_return_code RESERVED
	fi

	$test_alloc_generic -B hugetlb_file -N 2 -w $tmp_hugetlb_mount -f base1 -L "mmap access:wait_after" &
	sleep 0.1
	show_hugetlb_pool
	if [ "$(get_hugepage_reserved)" -eq 3 ] ; then
		set_return_code RESV_CONSUMED
	fi

	$test_alloc_generic -B hugetlb_file -N 10 -w $tmp_hugetlb_mount -f base2 -L "mmap access:wait_after" &
	sleep 0.1
	show_hugetlb_pool
	if [ "$(get_hugepage_reserved)" -eq 0 ] ; then
		set_return_code RESV_USEDUP
	fi

	kill_all_subprograms
	rm -f $tmp_hugetlb_mount/hugetlbfs/*
	show_hugetlb_pool
	if [ "$(get_hugepage_reserved)" -eq 5 ] ; then
		set_return_code RESV_REVERTED
	fi

	set_return_code EXIT
}

_cleanup() {
	mount | grep hugetlbfs | grep min_size | awk '{print $3}' | while read line ; do
		umount -f $line
	done
	cleanup_mmgeneric
}

_check() {
	true
}
