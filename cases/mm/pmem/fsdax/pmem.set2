#!1 FLAVOR: noop pmd fio hwpoison_pte hwpoison_pmd

. $TCDIR/lib/mm.sh

NR_THP=3
PMEMDIR=/mnt/pmem
PMEM_MODE=fsdax
[ ! "$FS_TYPE" ] && FS_TYPE=ext4 # xfs

EXPECTED_RETURN_CODE="START FSDAX_MAPPING_DONE EXIT"

_prepare() {
	# TODO: assuming namespace0.0
	ndctl destroy-namespace namespace0.0 --force
	ndctl create-namespace -f -e namespace0.0 -m fsdax

	if [ "$FS_TYPE" == ext4 ] ; then
		echo "formatting /dev/pmem0 for ext4"
		mkfs.ext4 -q -b 4096 -E stride=512 -F /dev/pmem0 || return 1
		mkdir -p $PMEMDIR/ext4
		echo "mounting /dev/pmem0 to $PMEMDIR/ext4"
		mount -o dax /dev/pmem0 $PMEMDIR/ext4 || return 1
	elif [ "$FS_TYPE" == xfs ] ; then
		echo "formatting /dev/pmem0 for xfs"
		mkfs.xfs -q -f /dev/pmem0 || return 1
		mkdir -p $PMEMDIR/xfs
		echo "mounting /dev/pmem0 to $PMEMDIR/xfs"
		mount -o dax /dev/pmem0 $PMEMDIR/xfs || return 1
	fi
}

_cleanup() {
	umount $PMEMDIR/$FS_TYPE

	ndctl destroy-namespace namespace0.0
}

#if __MARK_FLAVOR == __MARK_FLAVOR_noop
_control() {
	if [ "$FTRACE" ] ; then
		echo "trace-cmd record -p function_graph -g __do_page_fault lib/test_fsdax $MAP_SYNC"
		trace-cmd record -p function_graph -g __do_page_fault lib/test_fsdax $MAP_SYNC
	elif [ "$FTRACE_EVENT" ] ; then
		echo "trace-cmd record -e fs_dax:* lib/test_fsdax $MAP_SYNC"
		# trace-cmd record -e fs_dax:* lib/test_fsdax $MAP_SYNC
		trace-cmd record -e fs_dax:dax_writeback_one -e fs_dax:dax_writeback_range_done -e fs_dax:dax_writeback_range lib/test_fsdax $MAP_SYNC
	else
		echo "lib/test_fsdax $MAP_SYNC"
		lib/test_fsdax $MAP_SYNC

		if [ $? -eq 0 ] ; then
			set_return_code FSDAX_MAPPING_DONE
		fi
	fi

	set_return_code EXIT
}
#elif __MARK_FLAVOR == __MARK_FLAVOR_fio
_control() {
	cat <<EOF > $TMPD/fio.job.dax
[randomwrite]
ioengine=mmap
rw=randrw
refill_buffers=1
log_avg_msec=1000
size=256m
bs=4k
filename=$PMEMDIR/data
EOF
	cat <<EOF > $TMPD/fio.job.fs
[randomwrite]
ioengine=mmap
rw=randrw
refill_buffers=1
log_avg_msec=1000
size=256m
bs=4k
filename=$TMPD/data
EOF
	fdisk -l /dev/pmem0
	fio $TMPD/fio.job.dax | tee $TMPD/fio.job.dax.out
	fio $TMPD/fio.job.fs  | tee $TMPD/fio.job.fs.out
}
#elif __MARK_FLAVOR == __MARK_FLAVOR_pmd
_control() {
	echo 1 > /sys/kernel/debug/tracing/events/fs_dax/enable
	lib/test_alloc_generic -B pagecache -N $NR_THP -w $PMEMDIR -f data -L 'mmap access munmap'
	cat /sys/kernel/debug/tracing/trace
	echo 0 > /sys/kernel/debug/tracing/events/fs_dax/enable
}
#elif __MARK_FLAVOR == __MARK_FLAVOR_hwpoison_pte
_control() {
	echo > /sys/kernel/debug/tracing/trace
	echo 1 > /sys/kernel/debug/tracing/events/fs_dax/enable
	lib/test_alloc_generic -B pagecache -n 1 -w $PMEMDIR -f data -L 'mmap access memory_error_injection:error_type=madv_hard munmap'
	cat /sys/kernel/debug/tracing/trace | tee $TMPD/trace
	echo 0 > /sys/kernel/debug/tracing/events/fs_dax/enable
	set_return_code EXIT
}
#elif __MARK_FLAVOR == __MARK_FLAVOR_hwpoison_pmd
_control() {
	echo > /sys/kernel/debug/tracing/trace
	echo 1 > /sys/kernel/debug/tracing/events/fs_dax/enable
	lib/test_alloc_generic -B pagecache -N $NR_THP -w $PMEMDIR -f data -L 'mmap access memory_error_injection:error_type=madv_hard munmap'
	cat /sys/kernel/debug/tracing/trace | tee $TMPD/trace
	echo 0 > /sys/kernel/debug/tracing/events/fs_dax/enable
	set_return_code EXIT
}
#endif

_check() {
	true
}
