#!1 THP_SPLIT_METHOD: hwpoison soft_offline mbind migratepages move_pages
#!1 THP_TYPE: shared_thp double_mapping pmd_split thp_split

. $TRDIR/setup_mmgeneric.sh

THP=true

EXPECTED_RETURN_CODE="START EXIT"

MAPTYPE=mmap_numa

if [ __MARK_THP_SPLIT_METHOD == hwpoison ] ; then
	ACTION=memory_error_injection:error_type=hard-offline
	ERROR_TYPE=hard-offline
	EXPECTED_RETURN_CODE="START INJECT EXIT"
	MAPTYPE=mmap # no numa requirement
elif [ __MARK_THP_SPLIT_METHOD == soft_offline ] ; then
	ACTION=memory_error_injection:error_type=soft-offline
	ERROR_TYPE=soft-offline
	EXPECTED_RETURN_CODE="START INJECT EXIT"
elif [ __MARK_THP_SPLIT_METHOD == mbind ] ; then
	ACTION=mbind
elif [ __MARK_THP_SPLIT_METHOD == migratepages ] ; then
	ACTION=migratepages
elif [ __MARK_THP_SPLIT_METHOD == move_pages ] ; then
	ACTION=move_pages
fi

if [ __MARK_THP_TYPE == shared_thp ] ; then
	TEST_PROGRAM="$test_alloc_generic -B thp -N 1 -L '$MAPTYPE access:wait_after fork:wait_after $ACTION munmap:wait_before exit:wait_before'"
elif [ __MARK_THP_TYPE == double_mapping ] ; then
	TEST_PROGRAM="$test_alloc_generic -B thp -N 1 -L '$MAPTYPE access:wait_after fork:wait_after split_thp:only_pmd $ACTION munmap:wait_before exit:wait_before'"
elif [ __MARK_THP_TYPE == pmd_split ] ; then
	TEST_PROGRAM="$test_alloc_generic -B thp -N 1 -L '$MAPTYPE access:wait_after split_thp:only_pmd $ACTION munmap:wait_before exit:wait_before'"
elif [ __MARK_THP_TYPE == thp_split ] ; then
	TEST_PROGRAM="$test_alloc_generic -B thp -N 1 -L '$MAPTYPE access:wait_after split_thp $ACTION munmap:wait_before exit:wait_before'"
fi

_prepare() {
	true
}

_cleanup() {
	[[ "$(jobs -p)" ]] || kill -9 $(jobs -p)
	cleanup_system_default
}

_control() {
    local pid="$1"
    local line="$2"

    echo_log "$line"
    case "$line" in
		"after_access")
			get_mm_stats 0 $pid $(pgrep -P $pid)
            kill -SIGUSR1 $pid
            ;;
        "after_fork")
			get_mm_stats 1 $pid $(pgrep -P $pid)
            kill -SIGUSR1 $pid
            ;;
        "before_munmap")
			get_mm_stats 2 $pid $(pgrep -P $pid)
            kill -SIGUSR1 $pid
            ;;
        "before_exit")
            set_return_code "EXIT"
            kill -SIGUSR1 $pid
            return 0
            ;;
		"waiting for injection from outside")
			echo_log "$MCEINJECT -p $pid -e $ERROR_TYPE -a $[BASEVFN + ERROR_OFFSET]"
			$MCEINJECT -p $pid -e $ERROR_TYPE -a $BASEVFN
			if check_process_status $pid ; then
				set_return_code INJECT
			else
				set_return_code KILLED_IN_INJECTION
				return 0
			fi
            kill -SIGUSR1 $pid
			;;
		"waiting for migratepages")
			echo "calling do_migratepages for $pid"
			do_migratepages $pid
			kill -SIGUSR1 $pid
			;;
        *)
            ;;
    esac
    return 1
}

_check() {
	true
}
